###
# #%L
# XMap Checklist importer DAO
# %%
# Copyright (C) 2012 - 2013 Cardiff University
# %%
# Use of this software is governed by the attached licence file. If no licence 
# file is present the software must not be used.
# 
# The use of this software, including reverse engineering, for any other purpose 
# is prohibited without the express written permission of the software owner, 
# Cardiff University.
# #L%
###
        
loadChecklistFile=LOAD DATA LOW_PRIORITY LOCAL INFILE '$importFile' INTO TABLE `${prefix}Raw` IGNORE $skipLines LINES;

addIndexTableRaw=ALTER TABLE `${prefix}Raw` ADD INDEX id (taxonID), ADD INDEX accName (acceptedNameUsageID); 


createTableNameUse=CREATE TABLE IF NOT EXISTS `${prefix}NameUse` (`id` INT(9) UNSIGNED NOT NULL AUTO_INCREMENT, `tidyName` VARCHAR(255) NOT NULL DEFAULT '', `higher` VARCHAR(255) NOT NULL,  `species` VARCHAR(255) NOT NULL, `rank` VARCHAR(20), `infraspecies` VARCHAR(255) NOT NULL, `authority` VARCHAR(255) NOT NULL, `status` VARCHAR(20), `nameXMap` VARCHAR(255), `nameNoAuthorXMap` VARCHAR(255), `epithetXMap` VARCHAR(255), `taxonId` VARCHAR(60) NOT NULL REFERENCES `${prefix}Taxon` (id), `code` VARCHAR(36) DEFAULT '',  `comment`  TEXT DEFAULT NULL, PRIMARY KEY  (id), INDEX  (tidyName), INDEX (nameXMap), INDEX  (nameNoAuthorXMap), INDEX (epithetXMap), INDEX (taxonId), INDEX (rank), INDEX (status) )ENGINE\=InnoDB DEFAULT CHARSET\=utf8 DEFAULT COLLATE\=utf8_unicode_ci;
  

importBinomialDwCCoL=REPLACE INTO `${prefix}NameUse` (tidyName, higher, species, infraspecies, authority, taxonId, code, rank, status, comment) SELECT $tidyName, $higher, $specificEpithet, $infraspecificEpithet, $scientificNameAuthorship, $taxonId, $code, taxonRank, '$status', TRIM($comment) FROM `${prefix}Raw` WHERE $filter;


fixNameUseRanksSubspecies=UPDATE `${prefix}NameUse` SET rank\= 'subspecies' WHERE rank IN ('infraspecies', 'nothosubsp', 'nothosubsp.', 'ssp.', 'subsp.', 'subspecioid', '');

fixNameUseRanksVariety=UPDATE `${prefix}NameUse` SET rank\= 'subspecies' WHERE rank IN ('col. var.', 'convar', 'convar.', 'nothovar.', 'notst',  'provar', 'subtaxon', 'subvar.', 'var', 'var.', 'varietas');

fixNameUseRanksForm=UPDATE `${prefix}NameUse` SET rank\= 'form' WHERE rank IN ('ab.', 'cv.', 'f', 'fma.', 'forma', 'forma specialis', 'lusus', 'm.', 'monstr.', 'mut.', 'nothof.', 'prol.', 'race', 'subforma', 'subf.', 'sublus.', 't.infr.');
        
removeMultipleSpaces=UPDATE `$table` SET $field\= trim(replace(replace(replace($field,'  ',' '),'  ',' '),'  ',' ')) $whereEd;        

createTableCheckListTaxon=CREATE TABLE IF NOT EXISTS `${prefix}Taxon` (`id` VARCHAR(60) NOT NULL, `databaseId` INT(8) UNSIGNED, `rank` VARCHAR(20), `parentId` VARCHAR(60) NOT NULL REFERENCES `${prefix}Taxon` (id), `uuid` VARCHAR(255) DEFAULT '', PRIMARY KEY (id),  INDEX (id, parentId), INDEX (rank), INDEX (parentId))ENGINE=InnoDB DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci;        
 	 			 	 		 
addTopNode=INSERT IGNORE INTO `${prefix}Taxon` (id, databaseId, rank, parentId) VALUES ($id, 0, 'top node', $id);

buildAdjacencyListTree=INSERT IGNORE INTO `${prefix}Taxon` \
      (id, databaseId, rank, parentId, uuid)  \
      SELECT taxonID, $datasetFieldName, taxonRank,  \
             $parentNameUsageID, $uuid \
      FROM `${prefix}Raw` T \
      WHERE $acceptedFilter;

updateUnplacedNames = UPDATE `${prefix}NameUse` SET status= 'unplaced', comment= CONCAT_WS('; ', comment, 'no accepted taxon') WHERE taxonId NOT IN (SELECT id FROM `${prefix}Taxon`)

updateParentToTopNode = UPDATE `${prefix}Taxon` as t left join `${prefix}Taxon` as tAux on t.parentId=tAux.id  SET t.parentId = 0 where t.parentId=t.id or t.parentId is null or t.parentId='' or tAux.parentId is null;

processHigerTaxa=UPDATE `${prefix}NameUse` set nameXMap\=tidyName, nameNoAuthorXMap \= case when higher\!\='' then higher else null end WHERE rank NOT IN ('species', 'subspecies', 'variety', 'form');

processSpecies=UPDATE `${prefix}NameUse` set nameXMap\=tidyName, nameNoAuthorXMap \= trim(CONCAT_WS(' ', higher, species)), epithetXMap \= trim(species) WHERE rank \= 'species';

processInfraspecies=UPDATE `${prefix}NameUse` set nameXMap\=tidyName, nameNoAuthorXMap \= trim(CONCAT_WS(' ', higher, species, rank, infraspecies)), epithetXMap \= trim(infraspecies) WHERE rank IN ('subspecies', 'variety', 'form');

createFunctionGetAncestor=CREATE FUNCTION `getAncestor${sufix}`(taxonId VARCHAR(60), rankDesired varchar(80)) RETURNS VARCHAR(60) BEGIN declare auxTaxonId VARCHAR(60); declare auxTaxonRank varchar(80); declare auxParentTaxonId VARCHAR(60); declare rankIdDesired int(8); declare rankIdAuxTaxon int(8); declare stopSearchAncestor boolean; select id into rankIdDesired from TaxonomicRankHierarchy where rank\=rankDesired; set auxTaxonId\=taxonId; set stopSearchAncestor\=false; WHILE (auxTaxonId is not null and !stopSearchAncestor) DO set rankIdAuxTaxon\=null; set auxTaxonRank\=null; set auxParentTaxonId\=null; select r.id,r.rank into rankIdAuxTaxon, auxTaxonRank from TaxonomicRankHierarchy as r inner join `${prefix}Taxon` as t on t.rank \= r.rank where t.id\=auxTaxonId; select t.parentId into auxParentTaxonId from `${prefix}Taxon` as t where t.id \= auxTaxonId; if auxTaxonRank\=rankDesired or rankIdAuxTaxon<rankIdDesired or auxParentTaxonId\=auxTaxonId then set stopSearchAncestor\=true; else set auxTaxonId\=auxParentTaxonId; end if; END WHILE; if (auxTaxonRank!\=rankDesired) then return null; else return auxTaxonId; end if; END
